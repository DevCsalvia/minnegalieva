import React from 'react';
import { NavLink } from 'react-router-dom';
import { Route, Switch, Redirect } from 'react-router-dom';
import ReactPlayer from 'react-player'

// components
import Theme from './Theme/Theme';

import './TheoryPage.css';

const TheoryPage = props => {
    const themesData = [
        {
            content:
                <div className="theme">
                    <ReactPlayer width="800px" height="500px" controls={true} url='https://www.youtube.com/watch?v=n0sPFaLsNeI&list=PLY4rE9dstrJymG1GyPLgOKsJNq9r-p6pX' />
                    <h1>Что такое JavaScript?</h1>
                    <div className="theme__content">
                        <div className="theme__img">
                            <img src="../images/theme1.png" alt="THEME_IMg" />
                        </div>
                        <p>JavaScript ("JS" для краткости) — это полноценный динамический язык программирования, который применяется к HTML документу, и может обеспечить динамическую интерактивность на веб-сайтах. Его разработал Brendan Eich, сооснователь проекта Mozilla, Mozilla Foundation и Mozilla Corporation</p>
                        <p>JavaScript невероятно универсален и дружелюбен к новичкам. Обладая большим опытом, вы сможете создавать игры, анимированную 2D и 3D графику, полномасштабные приложения с базами данных и многое другое!</p>
                        <p>JavaScript сам по себе довольно компактный, но очень гибкий. Разработчиками написано большое количество инструментов поверх основного языка JavaScript, которые разблокируют огромное количество дополнительных функций с очень небольшим усилием. К ним относятся:</p>
                        <ul>
                            <li>Программные интерфейсы приложения (API), встроенные в браузеры, обеспечивающие различные функциональные возможности, такие как динамическое создание HTML и установку CSS стилей, захват и манипуляция видеопотоком, работа с веб-камерой пользователя или генерация 3D графики и аудио сэмплов.</li>
                            <li>Сторонние API позволяют разработчикам внедрять функциональность в свои сайты от других разработчиков, таких как Twitter или Facebook.</li>
                            <li>Также вы можете применить к вашему HTML сторонние фреймворки и библиотеки, что позволит вам ускорить создание сайтов и приложений.</li>
                        </ul>
                        <p>Поскольку эта статья должна быть только лёгким введением в JavaScript, мы не собираемся путать вас на этом этапе, подробно рассказывая о том, какая разница между основным языком JavaScript и различными инструментами, перечисленными выше. Вы можете подробно изучить все это позже, в нашей учебной области JavaScript  и в остальной части MDN. </p>

                    </div>
                </div>
        },
        {
            content:
                <div className="theme">
                    <ReactPlayer width="800px" height="500px" controls={true} url='https://www.youtube.com/watch?v=NkmZl1Yy94Q' />
                    <h1>Что такое CSS?</h1>
                    <div className="theme__content">
                        <div className="theme__img">
                            <img src="../images/theme2.png" alt="THEME_IMg" />
                        </div>
                        <p>CSS – это формальный язык, служащий для описания оформления внешнего вида документа, созданного с использованием языка разметки (HTML, XHTML, XML). Название происходит от английского Cascading Style Sheets, что означает «каскадные таблицы стилей».</p>
                        <h2>Зачем используется CSS</h2>
                        <p>Назначение CSS – отделять то, что задает внешний вид страницы, от ее содержания. Если документ создан только с использованием HTML, то в нем определяется не только каждый элемент, но и способ его отображения (цвет, шрифт, положение блока и т. д.). Если же подключены каскадные таблицы стилей, то HTML описывает только очередность объектов. А за все их свойства отвечает CSS. В HTML достаточно прописывать класс, не перечисляя все стили каждый раз.</p>
                        <p>Такая технология:</p>
                        <ul>
                            <li>обеспечивает относительно простую и быструю разработку, потому что однажды созданное оформление можно применять ко многим страницам;</li>
                            <li>повышает гибкость и удобство редактирования – достаточно внести правку в CSS, чтобы оформление изменилось везде;</li>
                            <li>делает код более простым, снижая повторяемость элементов. Его проще читать программистам и поисковым ботам;</li>
                            <li>ускоряет время загрузки, потому что CSS может кэшироваться при первом открытии, а в последующих считываются только структура и данные;</li>
                            <li>увеличивает количество визуальных решений для представления содержимого;</li>
                            <li>обеспечивает возможность легко применять к одному документу разные стили (например, создавать адаптированную версию для мобильных устройств или специальные стили для слабовидящих).</li>
                        </ul>
                        <p>То есть каскадные таблицы служат не только для воплощения дизайна, но и кардинально меняют подход к сайтостроению, упрощая труд разработчиков и обеспечивая гибкость реализации. Вот для чего нужен CSS. </p>
                    </div>
                </div>
        },
        {
            content:
                <div className="theme">
                    <ReactPlayer width="800px" height="500px" controls={true} url='https://www.youtube.com/watch?v=-k8w0x-rp80' />
                    <h1>Что такое React?</h1>
                    <div className="theme__content">
                        <div className="theme__img">
                            <img src="../images/theme3.jpeg" alt="THEME_IMg" />
                        </div>
                        <p>React (иногда React.js или ReactJS) — JavaScript-библиотека с открытым исходным кодом для разработки пользовательских интерфейсов. React разрабатывается и поддерживается Facebook, Instagram и сообществом отдельных разработчиков и корпораций. React может использоваться для разработки одностраничных и мобильных приложений. Его цель — предоставить высокую скорость, простоту и масштабируемость. В качестве библиотеки для разработки пользовательских интерфейсов React часто используется с другими библиотеками, такими как MobX, Redux и GraphQL.</p>
                        <h2>История разработки</h2>
                        <p>React был создан Джорданом Валке, разработчиком программного обеспечения из Facebook. На него оказал влияние XHP — компонентный HTML-фреймворк для PHP. Впервые React использовался в новостной ленте Facebook в 2011 году и позже в ленте Instagram в 2012 году. Исходный код React открыт в мае 2013 года на конференции «JSConf US». React Native анонсирован на конференции Facebook «React.js Conf» в феврале 2015 года, а исходный код открыт в марте 2015 года. Он позволяет разрабатывать нативные Android-, iOS- и UWP-приложения с использованием React. 18 апреля 2017 года Facebook анонсировал React Fiber, переписанную и оптимизированную версию React. React Fiber станет основой разработки всех будущих функций и улучшений.</p>
                        <p>Особенности:</p>
                        <ul>
                            <li>Однонаправленная передача данных Свойства передаются от родительских компонентов к дочерним. Компоненты получают свойства как множество неизменяемых (англ. immutable) значений, поэтому компонент не может напрямую изменять свойства, но может вызывать изменения через callback-функции. Такой механизм называют «свойства вниз, события наверх».</li>
                            <li>Виртуальный DOM React использует виртуальный DOM (англ. virtual DOM). React создаёт кэш-структуру в памяти, что позволяет вычислять разницу между предыдущим и текущим состояниями интерфейса для оптимального обновления DOM браузера. Таким образом программист может работать со страницей, считая, что она обновляется вся, но библиотека самостоятельно решает, какие компоненты страницы необходимо обновить.</li>
                            <li>JSX JavaScript XML (JSX) — это расширение синтаксиса JavaScript, которое позволяет использовать HTML-подобный синтаксис для описания структуры интерфейса. Как правило, компоненты написаны с использованием JSX, но также есть возможность использования обычного JavaScript. JSX напоминает другой язык, созданный в компании Фейсбук для расширения PHP, XHP .</li>
                            <li>Не только отрисовка HTML в браузере React используется не только для отрисовки HTML в браузере. Например, Facebook имеет динамические графики, которые отрисовываются в теги canvas. Netflix и PayPal используют изоморфные загрузки для отрисовки идентичного HTML на сервере и клиенте.</li>
                            <li>React Hooks Хуки позволяют использовать состояние и другие возможности React без написания классов. Построение пользовательских хуков позволяет помещать логику компонента в повторно используемые функции.</li>
                        </ul>
                    </div>
                </div>
        }
    ];

    let routes = (
        <Switch>
            <Route path={props.match.url + '/js'} render={() => <Theme content={themesData[0].content} />} />
            <Route path={props.match.url + '/css'} render={() => <Theme content={themesData[1].content} />} />
            <Route path={props.match.url + '/react'} render={() => <Theme content={themesData[2].content} />} />
            <Redirect to='/theory' />
        </Switch>
    );

    return (
        <div className="TheoryPage-Wrapper">
            <ul className="TheoryPage__Themes">
                <li><NavLink
                    exact={true}
                    to={props.match.url + '/js'}>JavaScript</NavLink></li>
                <li><NavLink
                    exact={true}
                    to={props.match.url + '/css'}>CSS</NavLink></li>
                <li><NavLink
                    exact={true}
                    to={props.match.url + '/react'}>React</NavLink></li>
            </ul>
            {routes};
        </div>
    );
}

export default TheoryPage;